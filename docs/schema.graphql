"""
A DateTime scalar type represents textual data, formatted as an ISO8601 date-time.
"""
scalar DateTime

"""Contains all technical metadata about this deposit."""
type Deposit implements Node {
  """The identifier of the deposit."""
  depositId: UUID!

  """The moment this deposit was created."""
  creationTimestamp: DateTime!

  """The ID of an object"""
  id: ID!

  """The current state of the deposit."""
  state: State

  """List all states of the deposit."""
  states(
    """Ordering options for the returned states."""
    orderBy: StateOrder
    before: String
    after: String
    first: Int
    last: Int
  ): StateConnection

  """The current ingest step of the deposit."""
  ingestStep: IngestStep

  """List all ingest steps of the deposit."""
  ingestSteps(
    """Ordering options for the returned ingest steps."""
    orderBy: IngestStepOrder
    before: String
    after: String
    first: Int
    last: Int
  ): IngestStepConnection

  """Information about the depositor that submitted this deposit."""
  depositor: Depositor!
}

"""A connection to a list of items."""
type DepositConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DepositEdge]

  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """A list of nodes."""
  nodes: [Deposit!]!
}

"""An edge in a connection."""
type DepositEdge {
  """The item at the end of the edge."""
  node: Deposit!

  """A cursor for use in pagination."""
  cursor: String!
}

"""
The label and filter to be used in searching for deposits by ingest step
"""
input DepositIngestStepFilter {
  """If provided, only show deposits with this state."""
  label: IngestStepLabel!

  """
  Determine whether to search in current states (`LATEST`, default) or all current and past states (`ALL`).
  """
  filter: IngestStepFilter = LATEST
}

"""Information about the depositor that submitted this deposit."""
type Depositor {
  """The EASY account of the depositor."""
  depositorId: String!

  """List all deposits originating from the same depositor."""
  deposits(
    """List only those deposits that have this specified state label."""
    state: DepositStateFilter

    """List only those deposits that have this specified ingest step label."""
    ingestStep: DepositIngestStepFilter

    """Ordering options for the returned deposits."""
    orderBy: DepositOrder
    before: String
    after: String
    first: Int
    last: Int
  ): DepositConnection
}

"""Ordering options for deposits"""
input DepositOrder {
  """The field to order deposit by"""
  field: DepositOrderField!

  """The ordering direction"""
  direction: OrderDirection!
}

"""Properties by which deposits can be ordered"""
enum DepositOrderField {
  """Order deposits by creation timestamp"""
  CREATION_TIMESTAMP

  """Order deposits by depositId"""
  DEPOSIT_ID
}

"""The label and filter to be used in searching for deposits by state"""
input DepositStateFilter {
  """If provided, only show deposits with this state."""
  label: StateLabel!

  """
  Determine whether to search in current states (`LATEST`, default) or all current and past states (`ALL`).
  """
  filter: StateFilter = LATEST
}

"""The ingest step of the deposit."""
type IngestStep implements Node {
  """The label of the ingest step."""
  step: IngestStepLabel!

  """The timestamp at which the deposit got into this ingest step."""
  timestamp: DateTime!

  """The ID of an object"""
  id: ID!

  """
  Returns the deposit that is associated with this particular ingest step
  """
  deposit: Deposit

  """List all deposits with the same current ingest step."""
  deposits(
    """
    Determine whether to search in current ingest steps (`LATEST`, default) or all current and past ingest steps (`ALL`).
    """
    ingestStepFilter: IngestStepFilter! = LATEST

    """Ordering options for the returned deposits."""
    orderBy: DepositOrder
    before: String
    after: String
    first: Int
    last: Int
  ): DepositConnection
}

"""A connection to a list of items."""
type IngestStepConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IngestStepEdge]

  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """A list of nodes."""
  nodes: [IngestStep!]!
}

"""An edge in a connection."""
type IngestStepEdge {
  """The item at the end of the edge."""
  node: IngestStep!

  """A cursor for use in pagination."""
  cursor: String!
}

"""
Mark a query to only search through current ingest steps, or also to include past ingest steps.
"""
enum IngestStepFilter {
  """Search through both current and past ingest steps."""
  ALL

  """Only search through current ingest steps."""
  LATEST
}

"""The label identifying the ingest step."""
enum IngestStepLabel {
  """The ingest process of this deposit has completed."""
  COMPLETED

  """The file content of the deposit's payload is being index."""
  SOLR4FILES

  """Indexing the archival copy and its relation to other bags."""
  BAGINDEX

  """Creating an archival copy of the deposit for storage in the vault."""
  BAGSTORE

  """
  Dissemination copies of the audio/video files in the deposit are being made in Springfield.
  """
  SPRINGFIELD

  """A dissemination copy of the deposit is being made in Fedora."""
  FEDORA

  """Persistent identifiers are being generated for this deposit."""
  PID_GENERATOR

  """Started validating the deposit."""
  VALIDATE
}

"""Ordering options for ingest steps"""
input IngestStepOrder {
  """The field to order ingest steps by"""
  field: IngestStepOrderField!

  """The ordering direction"""
  direction: OrderDirection!
}

"""Properties by which ingest steps can be ordered"""
enum IngestStepOrderField {
  """Order ingest steps by timestamp"""
  TIMESTAMP

  """Order ingest steps by step"""
  STEP
}

"""The ingest step of a deposit"""
input InputIngestStep {
  """The label of the ingest step."""
  step: IngestStepLabel!

  """The timestamp at which the deposit got into this ingest step."""
  timestamp: DateTime!
}

"""The state of a deposit"""
input InputState {
  """The state label of the deposit."""
  label: StateLabel!

  """Additional information about the state."""
  description: String!

  """The timestamp at which the deposit got into this state."""
  timestamp: DateTime!
}

"""The root query for implementing GraphQL mutations."""
type Mutation {
  """Register a new deposit with 'id', 'creationTimestamp' and 'depositId'."""
  addDeposit(depositId: UUID!, creationTimestamp: DateTime!, depositorId: String!): Deposit

  """Update the state of the deposit identified by 'id'."""
  updateState(depositId: UUID!, state: InputState!): State

  """Update the ingest step of the deposit identified by 'id'."""
  updateIngestStep(depositId: UUID!, ingestStep: InputIngestStep!): IngestStep
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""
Possible directions in which to order a list of items when provided an orderBy argument
"""
enum OrderDirection {
  """Specifies a descending order for a given orderBy argument"""
  DESC

  """Specifies an ascending order for a given orderBy argumen."""
  ASC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""The query root of easy-deposit-properties' GraphQL interface."""
type Query {
  """Get the technical metadata of the deposit identified by 'id'."""
  deposit(
    """The id for which to find the deposit"""
    id: UUID!
  ): Deposit

  """List all registered deposits."""
  deposits(
    """List only those deposits that have this specified state label."""
    state: DepositStateFilter

    """List only those deposits that have this specified ingest step label."""
    ingestStep: DepositIngestStepFilter

    """Ordering options for the returned deposits."""
    orderBy: DepositOrder
    before: String
    after: String
    first: Int
    last: Int
  ): DepositConnection

  """Get the technical metadata related to this depositor."""
  depositor(
    """If provided, only show deposits from this depositor."""
    id: String
  ): Depositor

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
}

"""The state of the deposit."""
type State implements Node {
  """The state label of the deposit."""
  label: StateLabel!

  """Additional information about the state."""
  description: String!

  """The timestamp at which the deposit got into this state."""
  timestamp: DateTime!

  """The ID of an object"""
  id: ID!

  """
  Returns the deposit that is associated with this particular ingest step
  """
  deposit: Deposit

  """List all deposits with the same current state label."""
  deposits(
    """
    Determine whether to search in current states (`LATEST`, default) or all current and past states (`ALL`).
    """
    stateFilter: StateFilter! = LATEST

    """Ordering options for the returned deposits."""
    orderBy: DepositOrder
    before: String
    after: String
    first: Int
    last: Int
  ): DepositConnection
}

"""A connection to a list of items."""
type StateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StateEdge]

  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """A list of nodes."""
  nodes: [State!]!
}

"""An edge in a connection."""
type StateEdge {
  """The item at the end of the edge."""
  node: State!

  """A cursor for use in pagination."""
  cursor: String!
}

"""
Mark a query to only search through current states, or also to include past states.
"""
enum StateFilter {
  """Search through both current and past states."""
  ALL

  """Only search through current states."""
  LATEST
}

"""The label identifying the state of a deposit."""
enum StateLabel {
  """Was successfully archived in the Fedora Archive."""
  FEDORA_ARCHIVED

  """Was successfully archived in the data vault."""
  ARCHIVED

  """Currently undergoing curation by the datamanagers."""
  IN_REVIEW

  """
  Failed to be archived because of some unexpected condition. It may be possible to manually fix this.
  """
  FAILED

  """
  Did not meet the requirements set by easy-ingest-flow for this type of deposit.
  """
  REJECTED

  """
  Valid and waiting for processing by easy-ingest-flow, or being processed in it.
  """
  SUBMITTED

  """Does not contain a valid bag."""
  INVALID

  """Closed and being checked for validity."""
  FINALIZING

  """Deposit uploaded, waiting to be finalized."""
  UPLOADED

  """Open for additional data."""
  DRAFT
}

"""Ordering options for states"""
input StateOrder {
  """The field to order state by"""
  field: StateOrderField!

  """The ordering direction"""
  direction: OrderDirection!
}

"""Properties by which states can be ordered"""
enum StateOrderField {
  """Order states by timestamp"""
  TIMESTAMP

  """Order states by label"""
  LABEL
}

"""
The UUID scalar type represents textual data, formatted as a universally unique identifier.
"""
scalar UUID

