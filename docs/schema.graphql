"""
A DateTime scalar type represents textual data, formatted as an ISO8601 date-time.
"""
scalar DateTime

"""Contains all technical metadata about this deposit."""
type Deposit {
  """The identifier of the deposit."""
  id: UUID!

  """The moment this deposit was created."""
  creationTimestamp: DateTime!

  """The current state of the deposit."""
  state: State

  """List all states of the deposit."""
  states(
    """Ordering options for the returned states."""
    orderBy: StateOrder
  ): [State!]!

  """Information about the depositor that submitted this deposit."""
  depositor: Depositor!
}

"""Information about the depositor that submitted this deposit."""
type Depositor {
  """The EASY account of the depositor."""
  depositorId: String!

  """List all deposits originating from the same depositor."""
  deposits(orderBy: DepositOrder): [Deposit!]!
}

"""Ordering options for deposits"""
input DepositOrder {
  """The field to order deposit by"""
  field: DepositOrderField!

  """The ordering direction"""
  direction: OrderDirection!
}

"""Properties by which deposits can be ordered"""
enum DepositOrderField {
  """Order deposits by creation timestamp"""
  CREATION_TIMESTAMP

  """Order deposits by depositId"""
  DEPOSIT_ID
}

"""The root query for implementing GraphQL mutations."""
type Mutation {
  """Register a new deposit with 'id', 'creationTimestamp' and 'depositId'."""
  addDeposit(id: UUID!, creationTimestamp: DateTime!, depositorId: String!): Deposit

  """Update the state of the deposit identified by 'id'."""
  updateState(id: UUID!, state: StateInput!): Deposit
}

"""
Possible directions in which to order a list of items when provided an orderBy argument
"""
enum OrderDirection {
  """Specifies a descending order for a given orderBy argument"""
  DESC

  """Specifies an ascending order for a given orderBy argumen."""
  ASC
}

"""The query root of easy-deposit-properties' GraphQL interface."""
type Query {
  """List all registered deposits."""
  deposits(state: StateLabel, depositorId: String, orderBy: DepositOrder): [Deposit!]!

  """Get the technical metadata of the deposit identified by 'id'."""
  deposit(id: UUID!): Deposit
}

"""The state of the deposit."""
type State {
  """The state label of the deposit."""
  label: StateLabel!

  """Additional information about the state."""
  description: String!

  """The timestamp at which the deposit got into this state."""
  timestamp: DateTime!

  """List all deposits with the same current state label."""
  deposits(
    """Ordering options for the returned deposits."""
    orderBy: DepositOrder
  ): [Deposit!]!
}

"""The state of a deposit"""
input StateInput {
  """The state label of the deposit."""
  label: StateLabel!

  """Additional information about the state."""
  description: String!

  """The timestamp at which the deposit got into this state."""
  timestamp: DateTime!
}

"""The label identifying the state of a deposit."""
enum StateLabel {
  """Was successfully archived in the Fedora Archive."""
  FEDORA_ARCHIVED

  """Was successfully archived in the data vault."""
  ARCHIVED

  """Currently undergoing curation by the datamanagers."""
  IN_REVIEW

  """
  Failed to be archived because of some unexpected condition. It may be possible to manually fix this.
  """
  FAILED

  """
  Did not meet the requirements set by easy-ingest-flow for this type of deposit.
  """
  REJECTED

  """
  Valid and waiting for processing by easy-ingest-flow, or being processed in it.
  """
  SUBMITTED

  """Does not contain a valid bag."""
  INVALID

  """Closed and being checked for validity."""
  FINALIZING

  """Deposit uploaded, waiting to be finalized."""
  UPLOADED

  """Open for additional data."""
  DRAFT
}

"""Ordering options for states"""
input StateOrder {
  """The field to order state by"""
  field: StateOrderField!

  """The ordering direction"""
  direction: OrderDirection!
}

"""Properties by which states can be ordered"""
enum StateOrderField {
  """Order states by timestamp"""
  TIMESTAMP

  """Order states by label"""
  LABEL
}

"""
The UUID scalar type represents textual data, formatted as a universally unique identifier.
"""
scalar UUID

